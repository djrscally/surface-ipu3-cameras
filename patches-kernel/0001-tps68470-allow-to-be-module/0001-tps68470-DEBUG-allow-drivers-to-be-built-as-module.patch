From 616dbdc46c21afaca08b77c4ea9527abde0df12f Mon Sep 17 00:00:00 2001
From: Tsuchiya Yuto <kitakar@gmail.com>
Date: Tue, 25 Aug 2020 19:29:04 +0900
Subject: [PATCH 1/3] tps68470: DEBUG: allow drivers to be built as module

Signed-off-by: Tsuchiya Yuto <kitakar@gmail.com>
---
 drivers/acpi/Kconfig              |  6 +-----
 drivers/acpi/pmic/tps68470_pmic.c | 20 +++++++++++++++++++-
 drivers/gpio/Kconfig              |  6 +-----
 drivers/gpio/gpio-tps68470.c      | 13 ++++++++++++-
 drivers/mfd/Kconfig               |  7 +------
 drivers/mfd/tps68470.c            | 11 ++++++++++-
 6 files changed, 44 insertions(+), 19 deletions(-)

diff --git a/drivers/acpi/Kconfig b/drivers/acpi/Kconfig
index 7540a5179a47..7d058623877e 100644
--- a/drivers/acpi/Kconfig
+++ b/drivers/acpi/Kconfig
@@ -569,7 +569,7 @@ config ACPI_PPTT
 endif
 
 config TPS68470_PMIC_OPREGION
-	bool "ACPI operation region support for TPS68470 PMIC"
+	tristate "ACPI operation region support for TPS68470 PMIC"
 	depends on MFD_TPS68470
 	help
 	  This config adds ACPI operation region support for TI TPS68470 PMIC.
@@ -580,10 +580,6 @@ config TPS68470_PMIC_OPREGION
 	  This driver enables ACPI operation region support control voltage
 	  regulators and clocks.
 
-	  This option is a bool as it provides an ACPI operation
-	  region, which must be available before any of the devices
-	  using this, are probed.
-
 endif	# ACPI
 
 config X86_PM_TIMER
diff --git a/drivers/acpi/pmic/tps68470_pmic.c b/drivers/acpi/pmic/tps68470_pmic.c
index c2b5cd243499..49fb5662d6e2 100644
--- a/drivers/acpi/pmic/tps68470_pmic.c
+++ b/drivers/acpi/pmic/tps68470_pmic.c
@@ -439,11 +439,29 @@ static int tps68470_pmic_opregion_probe(struct platform_device *pdev)
 	return -ENODEV;
 }
 
+static int tps68470_pmic_opregion_remove(struct platform_device *pdev)
+{
+	acpi_handle handle = ACPI_HANDLE(pdev->dev.parent);
+
+	acpi_remove_address_space_handler(handle, TI_PMIC_CLOCK_OPREGION_ID,
+					  tps68470_pmic_clk_handler);
+
+	acpi_remove_address_space_handler(handle, TI_PMIC_VR_VAL_OPREGION_ID,
+					  tps68470_pmic_vrval_handler);
+
+	acpi_remove_address_space_handler(handle, TI_PMIC_POWER_OPREGION_ID,
+					  tps68470_pmic_pwr_handler);
+
+	return 0;
+}
+
 static struct platform_driver tps68470_pmic_opregion_driver = {
 	.probe = tps68470_pmic_opregion_probe,
+	.remove = tps68470_pmic_opregion_remove,
 	.driver = {
 		.name = "tps68470_pmic_opregion",
 	},
 };
 
-builtin_platform_driver(tps68470_pmic_opregion_driver)
+module_platform_driver(tps68470_pmic_opregion_driver)
+MODULE_LICENSE("GPL v2");
diff --git a/drivers/gpio/Kconfig b/drivers/gpio/Kconfig
index 8030fd91a3cc..b2db7dc96336 100644
--- a/drivers/gpio/Kconfig
+++ b/drivers/gpio/Kconfig
@@ -1281,7 +1281,7 @@ config GPIO_TPS65912
 	  This driver supports TPS65912 gpio chip
 
 config GPIO_TPS68470
-	bool "TPS68470 GPIO"
+	tristate "TPS68470 GPIO"
 	depends on MFD_TPS68470
 	help
 	  Select this option to enable GPIO driver for the TPS68470
@@ -1291,10 +1291,6 @@ config GPIO_TPS68470
 	  input or output as appropriate, the sensor related GPIOs
 	  are "output only" GPIOs.
 
-	  This driver config is bool, as the GPIO functionality
-	  of the TPS68470 must be available before dependent
-	  drivers are loaded.
-
 config GPIO_TQMX86
 	tristate "TQ-Systems QTMX86 GPIO"
 	depends on MFD_TQMX86 || COMPILE_TEST
diff --git a/drivers/gpio/gpio-tps68470.c b/drivers/gpio/gpio-tps68470.c
index f7f5f770e0fb..58386a88536a 100644
--- a/drivers/gpio/gpio-tps68470.c
+++ b/drivers/gpio/gpio-tps68470.c
@@ -158,11 +158,22 @@ static int tps68470_gpio_probe(struct platform_device *pdev)
 	return ret;
 }
 
+static int tps68470_gpio_remove(struct platform_device *pdev)
+{
+	struct tps68470_gpio_data *gpio = platform_get_drvdata(pdev);
+
+	gpiochip_remove(&gpio->gc);
+
+	return 0;
+}
+
 static struct platform_driver tps68470_gpio_driver = {
 	.driver = {
 		   .name = "tps68470-gpio",
 	},
 	.probe = tps68470_gpio_probe,
+	.remove = tps68470_gpio_remove,
 };
 
-builtin_platform_driver(tps68470_gpio_driver)
+module_platform_driver(tps68470_gpio_driver)
+MODULE_LICENSE("GPL v2");
diff --git a/drivers/mfd/Kconfig b/drivers/mfd/Kconfig
index 33df0837ab41..28e9164b3a85 100644
--- a/drivers/mfd/Kconfig
+++ b/drivers/mfd/Kconfig
@@ -1498,7 +1498,7 @@ config MFD_TPS65217
 	  will be called tps65217.
 
 config MFD_TPS68470
-	bool "TI TPS68470 Power Management / LED chips"
+	tristate "TI TPS68470 Power Management / LED chips"
 	depends on ACPI && PCI && I2C=y
 	depends on I2C_DESIGNWARE_PLATFORM=y
 	select MFD_CORE
@@ -1510,11 +1510,6 @@ config MFD_TPS68470
 	  These include voltage regulators, LEDs and other features
 	  that are often used in portable devices.
 
-	  This option is a bool as it provides an ACPI operation
-	  region, which must be available before any of the devices
-	  using this are probed. This option also configures the
-	  designware-i2c driver to be built-in, for the same reason.
-
 config MFD_TI_LP873X
 	tristate "TI LP873X Power Management IC"
 	depends on I2C
diff --git a/drivers/mfd/tps68470.c b/drivers/mfd/tps68470.c
index 4a4df4ffd18c..130a65c22132 100644
--- a/drivers/mfd/tps68470.c
+++ b/drivers/mfd/tps68470.c
@@ -82,10 +82,16 @@ static int tps68470_probe(struct i2c_client *client)
 	return 0;
 }
 
+static int tps68470_remove(struct i2c_client *client)
+{
+	return 0;
+}
+
 static const struct acpi_device_id tps68470_acpi_ids[] = {
 	{"INT3472"},
 	{},
 };
+MODULE_DEVICE_TABLE(acpi, tps68470_acpi_ids);
 
 static struct i2c_driver tps68470_driver = {
 	.driver = {
@@ -93,5 +99,8 @@ static struct i2c_driver tps68470_driver = {
 		   .acpi_match_table = tps68470_acpi_ids,
 	},
 	.probe_new = tps68470_probe,
+	.remove = tps68470_remove,
 };
-builtin_i2c_driver(tps68470_driver);
+module_i2c_driver(tps68470_driver);
+
+MODULE_LICENSE("GPL v2");
-- 
2.28.0

