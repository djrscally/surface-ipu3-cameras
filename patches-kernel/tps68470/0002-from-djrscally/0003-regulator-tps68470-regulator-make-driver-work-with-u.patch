From 27ea7214de154df979a1acece7bb911cd840985a Mon Sep 17 00:00:00 2001
From: Daniel Scally <djrscally@gmail.com>
Date: Wed, 19 Aug 2020 23:23:55 +0900
Subject: [PATCH 3/5] regulator: tps68470-regulator: make driver work with
 upstream mfd/tps68470, from djrscally

(This commit is a squash of the following commits:)

	- 0003-regulator-tps68470-regulator-make-driver-work-with-u.patch
		From: Daniel Scally <djrscally@gmail.com>
		Date: Wed, 19 Aug 2020 23:23:55 +0900
		Subject: [PATCH 03/10] regulator: tps68470-regulator: make driver work with
		upstream mfd/tps68470, from djrscally

		(Driver file from here:
		- https://github.com/djrscally/miix-510-cameras/blob/f94c3c5b4db87e58fb4146a181608ae963737beb/tps68470-regulator.c
		and partially from gist found in linux-surface camera support
		issue, for Kconfig, Makefile, and MFD.)
		[Overrode current driver with this file. Changed indentation to match
		other help text style in Kconfig]
		Signed-off-by: Tsuchiya Yuto <kitakar@gmail.com>

	- 0004-regulator-tps68470-regulator-change-space-indentatio.patch
		From: Tsuchiya Yuto <kitakar@gmail.com>
		Date: Thu, 20 Aug 2020 20:57:14 +0900
		Subject: [PATCH 04/10] regulator: tps68470-regulator: change space
		indentations to tabs

		Signed-off-by: Tsuchiya Yuto <kitakar@gmail.com>

	- 0005-regulator-tps68470-regulator-add-init_data.patch
		From: Tsuchiya Yuto <kitakar@gmail.com>
		Date: Thu, 20 Aug 2020 21:13:11 +0900
		Subject: [PATCH 05/10] regulator: tps68470-regulator: add init_data

		(Code from here:
		- https://raw.githubusercontent.com/intel/linux-intel-lts/9cef7f9b88549f0e9b46631edd29e5f619afa928/drivers/regulator/tps68470-regulator.c)
		Signed-off-by: Tsuchiya Yuto <kitakar@gmail.com>

	- 0006-regulator-tps68470-regulator-add-changes-from-djrsca.patch
		From: Daniel Scally <djrscally@gmail.com>
		Date: Tue, 25 Aug 2020 19:29:04 +0900
		Subject: [PATCH 06/10] regulator: tps68470-regulator: add changes from
		djrscally (regmap etc)

		(File from here:
		- https://github.com/djrscally/miix-510-cameras/blob/8216f96770efe10aa586f43f8027cf956addef9b/tps68470-regulator.c)
		[Overrode current file with the new file.]
		[Changed indentation from spaces to tabs.]
		Signed-off-by: Tsuchiya Yuto <kitakar@gmail.com>

	- 0007-regulator-tps68470-code-cleanups.patch
		From: Tsuchiya Yuto <kitakar@gmail.com>
		Date: Tue, 25 Aug 2020 19:44:28 +0900
		Subject: [PATCH 07/10] regulator: tps68470: code cleanups

		- Wrap long lines
		- Lower loglevel regarding successful registration
		- Remove else regarding successful registration

		Signed-off-by: Tsuchiya Yuto <kitakar@gmail.com>

Signed-off-by: Tsuchiya Yuto <kitakar@gmail.com>
---
 drivers/mfd/tps68470.c                 |   1 +
 drivers/regulator/Kconfig              |   5 +
 drivers/regulator/Makefile             |   1 +
 drivers/regulator/tps68470-regulator.c | 203 +++++++++++--------------
 4 files changed, 95 insertions(+), 115 deletions(-)

diff --git a/drivers/mfd/tps68470.c b/drivers/mfd/tps68470.c
index 5a2b0c32d160..58835ff82a21 100644
--- a/drivers/mfd/tps68470.c
+++ b/drivers/mfd/tps68470.c
@@ -22,6 +22,7 @@
 static const struct mfd_cell tps68470s[] = {
 	{ .name = "tps68470-gpio" },
 	{ .name = "tps68470_pmic_oprg" },
+	{ .name = "tps68470-regulator" },
 };
 
 static const struct regmap_config tps68470_regmap_config = {
diff --git a/drivers/regulator/Kconfig b/drivers/regulator/Kconfig
index de17ef7e18f0..d5f7a2987390 100644
--- a/drivers/regulator/Kconfig
+++ b/drivers/regulator/Kconfig
@@ -1149,6 +1149,11 @@ config REGULATOR_TPS65912
 	help
 	    This driver supports TPS65912 voltage regulator chip.
 
+config REGULATOR_TPS68470
+	tristate "TI TPS68470 Power Regulator"
+	help
+	  This driver supports TPS68470 voltage regulator.
+
 config REGULATOR_TPS80031
 	tristate "TI TPS80031/TPS80032 power regulator driver"
 	depends on MFD_TPS80031
diff --git a/drivers/regulator/Makefile b/drivers/regulator/Makefile
index d8d3ecf526a8..bd544d3bc5e8 100644
--- a/drivers/regulator/Makefile
+++ b/drivers/regulator/Makefile
@@ -139,6 +139,7 @@ obj-$(CONFIG_REGULATOR_TPS6524X) += tps6524x-regulator.o
 obj-$(CONFIG_REGULATOR_TPS6586X) += tps6586x-regulator.o
 obj-$(CONFIG_REGULATOR_TPS65910) += tps65910-regulator.o
 obj-$(CONFIG_REGULATOR_TPS65912) += tps65912-regulator.o
+obj-$(CONFIG_REGULATOR_TPS68470) += tps68470-regulator.o
 obj-$(CONFIG_REGULATOR_TPS80031) += tps80031-regulator.o
 obj-$(CONFIG_REGULATOR_TPS65132) += tps65132-regulator.o
 obj-$(CONFIG_REGULATOR_TWL4030) += twl-regulator.o twl6030-regulator.o
diff --git a/drivers/regulator/tps68470-regulator.c b/drivers/regulator/tps68470-regulator.c
index 08637d0c7c09..37b5f2a4b205 100644
--- a/drivers/regulator/tps68470-regulator.c
+++ b/drivers/regulator/tps68470-regulator.c
@@ -1,31 +1,31 @@
-// SPDX-License_Identifier: GPL-2.0
-/* Copyright (C) 2018 Intel Corporation
- *
- * Regulator driver for TPS68470 PMIC
- *
- */
-
-#include <linux/kernel.h>
 #include <linux/module.h>
-#include <linux/version.h>
-#include <linux/device.h>
-#include <linux/init.h>
-#include <linux/err.h>
 #include <linux/platform_device.h>
-
-#include <linux/regulator/of_regulator.h>
 #include <linux/regulator/driver.h>
-#include <linux/regulator/machine.h>
 #include <linux/mfd/tps68470.h>
+#include <linux/regulator/machine.h>
+#include <linux/regmap.h>
+#include <linux/mod_devicetable.h>
+
+/* header maybe */
+
+enum tps68470_regulators {
+	TPS68470_CORE,
+	TPS68470_ANA,
+	TPS68470_VCM,
+	TPS68470_VIO,
+	TPS68470_VSIO,
+	TPS68470_AUX1,
+	TPS68470_AUX2,
+};
+
+#define to_tps68470_regulator(rdev) \
+	container_of(rdev, struct tps68470_regulator, rdev)
 
-#if LINUX_VERSION_CODE >= KERNEL_VERSION(3, 18, 0)
-#define TPS68470_REGULATOR(_name, _id, _of_match, _ops, _n, _vr,	\
+#define TPS68470_REGULATOR(_name, _id, _ops, _n, _vr,	\
 			_vm, _er, _em, _t, _lr, _nlr) \
 	{						\
 		.name		= _name,		\
 		.id		= _id,			\
-		.of_match	= of_match_ptr(_of_match),	\
-		.regulators_node	= of_match_ptr("regulators"),	\
 		.ops		= &_ops,		\
 		.n_voltages	= _n,			\
 		.type		= REGULATOR_VOLTAGE,	\
@@ -38,82 +38,64 @@
 		.linear_ranges	= _lr,			\
 		.n_linear_ranges = _nlr,		\
 	}
-#else
-#define TPS68470_REGULATOR(_name, _id, _of_match, _ops, _n, _vr,	\
-			_vm, _er, _em, _t, _lr, _nlr) \
-	{						\
-		.name		= _name,		\
-		.id		= _id,			\
-		.ops		= &_ops,		\
-		.n_voltages = _n,			\
-		.type		= REGULATOR_VOLTAGE,	\
-		.owner		= THIS_MODULE,		\
-		.vsel_reg	= _vr,			\
-		.vsel_mask	= _vm,			\
-		.enable_reg = _er,			\
-		.enable_mask	= _em,			\
-		.volt_table = _t,			\
-		.linear_ranges	= _lr,			\
-		.n_linear_ranges = _nlr,		\
-	}
-#endif
 
-static const struct regulator_linear_range tps68470_ldo_ranges[] = {
-	REGULATOR_LINEAR_RANGE(875000, 0, 125, 17800),
-};
+#define tps68470_reg_init_data(_name, _min_uV, _max_uV)\
+{\
+	.constraints = {\
+		.name = (const char *)_name,\
+		.valid_ops_mask = REGULATOR_CHANGE_VOLTAGE	\
+			| REGULATOR_CHANGE_STATUS,\
+		.min_uV = _min_uV,\
+		.max_uV = _max_uV,\
+	},\
+}
 
-static const struct regulator_linear_range tps68470_core_ranges[] = {
-	REGULATOR_LINEAR_RANGE(900000, 0, 42, 25000),
+struct tps68470_regulator {
+	struct regulator_dev	rdev;
+	struct regmap			*regmap;
+	struct regulator_config	config;
 };
 
-static int tps68470_regulator_enable(struct regulator_dev *dev)
-{
-	struct tps68470 *tps = rdev_get_drvdata(dev);
+/* end of header maybe */
 
-	return tps68470_set_bits(tps, dev->desc->enable_reg,
-				 dev->desc->enable_mask,
-				 dev->desc->enable_mask);
-}
-
-static int tps68470_regulator_disable(struct regulator_dev *dev)
-{
-	struct tps68470 *tps = rdev_get_drvdata(dev);
+static const struct linear_range tps68470_ldo_ranges[] = {
+	REGULATOR_LINEAR_RANGE(875000, 0, 125, 17800),
+};
 
-	return tps68470_clear_bits(tps, dev->desc->enable_reg,
-				   dev->desc->enable_mask);
-}
+static const struct linear_range tps68470_core_ranges[] = {
+	REGULATOR_LINEAR_RANGE(900000, 0, 42, 25000),
+};
 
-/* Operations permitted on DCDCx, LDO2, LDO3 and LDO4 */
 static struct regulator_ops tps68470_regulator_ops = {
-	.is_enabled		= regulator_is_enabled_regmap,
-	.enable			= tps68470_regulator_enable,
-	.disable		= tps68470_regulator_disable,
-	.get_voltage_sel	= regulator_get_voltage_sel_regmap,
-	.set_voltage_sel	= regulator_set_voltage_sel_regmap,
-	.list_voltage		= regulator_list_voltage_linear_range,
-	.map_voltage		= regulator_map_voltage_linear_range,
+	.is_enabled         = regulator_is_enabled_regmap,
+	.enable             = regulator_enable_regmap,
+	.disable            = regulator_disable_regmap,
+	.get_voltage_sel    = regulator_get_voltage_sel_regmap,
+	.set_voltage_sel    = regulator_set_voltage_sel_regmap,
+	.list_voltage       = regulator_list_voltage_linear_range,
+	.map_voltage        = regulator_map_voltage_linear_range,
 };
 
 static const struct regulator_desc regulators[] = {
-	TPS68470_REGULATOR("CORE", TPS68470_CORE, "core",
+	TPS68470_REGULATOR("CORE", TPS68470_CORE,
 			   tps68470_regulator_ops, 43, TPS68470_REG_VDVAL,
 			   TPS68470_VDVAL_DVOLT_MASK, TPS68470_REG_VDCTL,
 			   TPS68470_VDCTL_EN_MASK,
 			   NULL, tps68470_core_ranges,
 			   ARRAY_SIZE(tps68470_core_ranges)),
-	TPS68470_REGULATOR("ANA", TPS68470_ANA, "ana",
+	TPS68470_REGULATOR("ANA", TPS68470_ANA,
 			   tps68470_regulator_ops, 126, TPS68470_REG_VAVAL,
 			   TPS68470_VAVAL_AVOLT_MASK, TPS68470_REG_VACTL,
 			   TPS68470_VACTL_EN_MASK,
 			   NULL, tps68470_ldo_ranges,
 			   ARRAY_SIZE(tps68470_ldo_ranges)),
-	TPS68470_REGULATOR("VCM", TPS68470_VCM, "vcm",
+	TPS68470_REGULATOR("VCM", TPS68470_VCM,
 			   tps68470_regulator_ops, 126, TPS68470_REG_VCMVAL,
 			   TPS68470_VCMVAL_VCVOLT_MASK, TPS68470_REG_VCMCTL,
 			   TPS68470_VCMCTL_EN_MASK,
 			   NULL, tps68470_ldo_ranges,
 			   ARRAY_SIZE(tps68470_ldo_ranges)),
-	TPS68470_REGULATOR("VIO", TPS68470_VIO, "vio",
+	TPS68470_REGULATOR("VIO", TPS68470_VIO,
 			   tps68470_regulator_ops, 126, TPS68470_REG_VIOVAL,
 			   TPS68470_VIOVAL_IOVOLT_MASK, TPS68470_REG_S_I2C_CTL,
 			   TPS68470_S_I2C_CTL_EN_MASK,
@@ -126,20 +108,20 @@ static const struct regulator_desc regulators[] = {
  * (2) If there is no I2C daisy chain it can be set freely.
  *
  */
-	TPS68470_REGULATOR("VSIO", TPS68470_VSIO, "vsio",
+	TPS68470_REGULATOR("VSIO", TPS68470_VSIO,
 			   tps68470_regulator_ops, 126, TPS68470_REG_VSIOVAL,
 			   TPS68470_VSIOVAL_IOVOLT_MASK, TPS68470_REG_S_I2C_CTL,
 			   TPS68470_S_I2C_CTL_EN_MASK,
 			   NULL, tps68470_ldo_ranges,
 			   ARRAY_SIZE(tps68470_ldo_ranges)),
-	TPS68470_REGULATOR("AUX1", TPS68470_AUX1, "aux1",
+	TPS68470_REGULATOR("AUX1", TPS68470_AUX1,
 			   tps68470_regulator_ops, 126, TPS68470_REG_VAUX1VAL,
 			   TPS68470_VAUX1VAL_AUX1VOLT_MASK,
 			   TPS68470_REG_VAUX1CTL,
 			   TPS68470_VAUX1CTL_EN_MASK,
 			   NULL, tps68470_ldo_ranges,
 			   ARRAY_SIZE(tps68470_ldo_ranges)),
-	TPS68470_REGULATOR("AUX2", TPS68470_AUX2, "aux2",
+	TPS68470_REGULATOR("AUX2", TPS68470_AUX2,
 			   tps68470_regulator_ops, 126, TPS68470_REG_VAUX2VAL,
 			   TPS68470_VAUX2VAL_AUX2VOLT_MASK,
 			   TPS68470_REG_VAUX2CTL,
@@ -148,16 +130,6 @@ static const struct regulator_desc regulators[] = {
 			   ARRAY_SIZE(tps68470_ldo_ranges)),
 };
 
-#define tps68470_reg_init_data(_name, _min_uV, _max_uV)\
-{\
-	.constraints = {\
-		.name = (const char *)_name,\
-		.valid_ops_mask = REGULATOR_CHANGE_VOLTAGE	\
-			| REGULATOR_CHANGE_STATUS,\
-		.min_uV = _min_uV,\
-		.max_uV = _max_uV,\
-	},\
-}
 
 struct regulator_init_data tps68470_init[] = {
 	tps68470_reg_init_data("CORE", 900000, 1950000),
@@ -171,57 +143,58 @@ struct regulator_init_data tps68470_init[] = {
 
 static int tps68470_regulator_probe(struct platform_device *pdev)
 {
-	struct tps68470 *tps = dev_get_drvdata(pdev->dev.parent);
-	struct tps68470_board *pdata = dev_get_platdata(tps->dev);
 	struct regulator_dev *rdev;
-	struct regulator_config config = { };
+	struct tps68470_regulator *tps68470_regulator;
+	struct regmap *tps68470_regmap;
 	int i;
 
-	platform_set_drvdata(pdev, tps);
+	tps68470_regmap = dev_get_drvdata(pdev->dev.parent);
+
+	for (i = 0; i < ARRAY_SIZE(regulators); i++) {
 
-	for (i = 0; i < TPS68470_NUM_REGULATOR; i++) {
-		/* Register the regulators */
-		config.dev = tps->dev;
-		if (pdata)
-			config.init_data = pdata->tps68470_init_data[i];
-		else
-			config.init_data = &tps68470_init[i];
+		tps68470_regulator = devm_kzalloc(&pdev->dev,
+							sizeof(*tps68470_regulator), GFP_KERNEL);
 
-		config.driver_data = tps;
-		config.regmap = tps->regmap;
+		if (!tps68470_regulator) {
+			return -ENOMEM;
+		}
+
+		tps68470_regulator->regmap = tps68470_regmap;
+		tps68470_regulator->config.dev = &pdev->dev;
+		tps68470_regulator->config.regmap = tps68470_regmap;
+		tps68470_regulator->config.init_data = &tps68470_init[i];
+
+		tps68470_regulator->rdev = *devm_regulator_register(&pdev->dev,
+								&regulators[i], &tps68470_regulator->config);
 
-		rdev = devm_regulator_register(&pdev->dev, &regulators[i],
-					       &config);
 		if (IS_ERR(rdev)) {
-			dev_err(tps->dev, "failed to register %s regulator\n",
-				pdev->name);
+			dev_err(pdev->dev.parent,
+					"Failed to register %s regulator.\n", pdev->name);
 			return PTR_ERR(rdev);
 		}
-		dev_info(tps->dev, "Registered %s regulator\n",
-				pdev->name);
+
+		dev_info(pdev->dev.parent,
+				"Successfully registered regulator %s for %s.\n",
+				tps68470_regulator->rdev.desc->name, pdev->name);
 	}
 
 	return 0;
 }
 
+static const struct platform_device_id tps68470_regulator_id_table[] = {
+	{ "tps68470-regulator", 0 },
+	{ },
+};
+MODULE_DEVICE_TABLE(platform, tps68470_regulator_id_table);
+
 static struct platform_driver tps68470_regulator_driver = {
 	.driver = {
 		.name = "tps68470-regulator",
 	},
 	.probe = tps68470_regulator_probe,
+	.id_table = tps68470_regulator_id_table,
 };
-
-static int __init tps68470_regulator_init(void)
-{
-	return platform_driver_register(&tps68470_regulator_driver);
-}
-subsys_initcall(tps68470_regulator_init);
-
-static void __exit tps68470_regulator_exit(void)
-{
-	platform_driver_unregister(&tps68470_regulator_driver);
-}
-module_exit(tps68470_regulator_exit);
+module_platform_driver(tps68470_regulator_driver);
 
 MODULE_AUTHOR("Zaikuo Wang <zaikuo.wang@intel.com>");
 MODULE_AUTHOR("Tianshu Qiu <tian.shu.qiu@intel.com>");
@@ -229,5 +202,5 @@ MODULE_AUTHOR("Jian Xu Zheng <jian.xu.zheng@intel.com>");
 MODULE_AUTHOR("Yuning Pu <yuning.pu@intel.com>");
 MODULE_AUTHOR("Rajmohan Mani <rajmohan.mani@intel.com>");
 MODULE_DESCRIPTION("TPS68470 voltage regulator driver");
-MODULE_ALIAS("platform:tps68470-regulator");
-MODULE_LICENSE("GPL v2");
+MODULE_AUTHOR("Daniel Scally <djrscally@protonmail.com>");
+MODULE_LICENSE("GPL v2");
\ No newline at end of file
-- 
2.28.0

