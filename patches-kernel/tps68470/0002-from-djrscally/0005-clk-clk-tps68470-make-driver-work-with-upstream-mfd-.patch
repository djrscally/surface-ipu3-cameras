From 12bea2b47524e70114612e7eadb3464bb77350aa Mon Sep 17 00:00:00 2001
From: Daniel Scally <djrscally@gmail.com>
Date: Wed, 19 Aug 2020 23:06:29 +0900
Subject: [PATCH 5/5] clk: clk-tps68470: make driver work with upstream
 mfd/tps68470, from djrscally
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

(This commit is a squash of the following commits:)

	- 0009-clk-clk-tps68470-make-driver-work-with-upstream-mfd-.patch
		From: Daniel Scally <djrscally@gmail.com>
		Date: Wed, 19 Aug 2020 23:06:29 +0900
		Subject: [PATCH 09/10] clk: clk-tps68470: make driver work with upstream
		mfd/tps68470, from djrscally

		(Driver file from here:
		- https://github.com/djrscally/miix-510-cameras/blob/f94c3c5b4db87e58fb4146a181608ae963737beb/tps68470-clk.c
		and partially from gist found in found in linux-surface camera
		support issue, for Makefile, Kconfig and MFD.)
		[Overrode current driver with the file. Renamed file to clk-tps68470.c
		to match the other filenames in clk dir. Changed indentation to match
		other help text style in Kconfig.]
		Signed-off-by: Tsuchiya Yuto <kitakar@gmail.com>

	- 0010-clk-clk-tps68470-fix-warnings-from-compiler.patch
		From: Tsuchiya Yuto <kitakar@gmail.com>
		Date: Thu, 20 Aug 2020 00:08:20 +0900
		Subject: [PATCH 10/10] clk: clk-tps68470: fix warnings from compiler

		Fixes the following warnings:

			drivers/clk/clk-tps68470.c: In function ‘tps68470_clk_prepare’:
			drivers/clk/clk-tps68470.c:96:8: warning: unused variable ‘val’ [-Wunused-variable]
			96 |     u8 val;
				|        ^~~
			drivers/clk/clk-tps68470.c:95:9: warning: unused variable ‘ret’ [-Wunused-variable]
			95 |     int ret, idx;
				|         ^~~
			drivers/clk/clk-tps68470.c: In function ‘tps68470_clk_unprepare’:
			drivers/clk/clk-tps68470.c:142:12: warning: ‘return’ with a value, in function returning void [-Wreturn-type]
			142 |     return 0;
				|            ^
			drivers/clk/clk-tps68470.c:124:13: note: declared here
			124 | static void tps68470_clk_unprepare(struct clk_hw *hw)
				|             ^~~~~~~~~~~~~~~~~~~~~~
			drivers/clk/clk-tps68470.c:128:9: warning: unused variable ‘ret’ [-Wunused-variable]
			128 |     int ret;
				|         ^~~
			drivers/clk/clk-tps68470.c: In function ‘tps68470_clk_disable’:
			drivers/clk/clk-tps68470.c:152:12: warning: ‘return’ with a value, in function returning void [-Wreturn-type]
			152 |     return 0;
				|            ^
			drivers/clk/clk-tps68470.c:150:13: note: declared here
			150 | static void tps68470_clk_disable(struct clk_hw *hw)
				|             ^~~~~~~~~~~~~~~~~~~~

		Signed-off-by: Tsuchiya Yuto <kitakar@gmail.com>

	- 0011-clk-tps68470-change-indentation-to-tabs.patch
		From: Tsuchiya Yuto <kitakar@gmail.com>
		Date: Tue, 25 Aug 2020 20:11:47 +0900
		Subject: [PATCH] clk: tps68470: change indentation to tabs

		Signed-off-by: Tsuchiya Yuto <kitakar@gmail.com>

Signed-off-by: Tsuchiya Yuto <kitakar@gmail.com>
---
 drivers/clk/Kconfig        |   5 +
 drivers/clk/Makefile       |   1 +
 drivers/clk/clk-tps68470.c | 197 ++++++++++++++++++-------------------
 drivers/mfd/tps68470.c     |   1 +
 4 files changed, 105 insertions(+), 99 deletions(-)

diff --git a/drivers/clk/Kconfig b/drivers/clk/Kconfig
index 4026fac9fac3..c01e59b3dab2 100644
--- a/drivers/clk/Kconfig
+++ b/drivers/clk/Kconfig
@@ -359,6 +359,11 @@ config COMMON_CLK_FIXED_MMIO
 	help
 	  Support for Memory Mapped IO Fixed clocks
 
+config CLK_TPS68470
+	tristate "Clock driver for TPS68470"
+	help
+	  Clock Driver TPS68470
+
 source "drivers/clk/actions/Kconfig"
 source "drivers/clk/analogbits/Kconfig"
 source "drivers/clk/baikal-t1/Kconfig"
diff --git a/drivers/clk/Makefile b/drivers/clk/Makefile
index da8fcf147eb1..2df6f9015cf4 100644
--- a/drivers/clk/Makefile
+++ b/drivers/clk/Makefile
@@ -63,6 +63,7 @@ obj-$(CONFIG_COMMON_CLK_STM32F)		+= clk-stm32f4.o
 obj-$(CONFIG_COMMON_CLK_STM32H7)	+= clk-stm32h7.o
 obj-$(CONFIG_COMMON_CLK_STM32MP157)	+= clk-stm32mp1.o
 obj-$(CONFIG_ARCH_TANGO)		+= clk-tango4.o
+obj-$(CONFIG_CLK_TPS68470)			+= clk-tps68470.o
 obj-$(CONFIG_CLK_TWL6040)		+= clk-twl6040.o
 obj-$(CONFIG_ARCH_U300)			+= clk-u300.o
 obj-$(CONFIG_ARCH_VT8500)		+= clk-vt8500.o
diff --git a/drivers/clk/clk-tps68470.c b/drivers/clk/clk-tps68470.c
index 9196c98d26ee..25432797a92c 100644
--- a/drivers/clk/clk-tps68470.c
+++ b/drivers/clk/clk-tps68470.c
@@ -1,14 +1,23 @@
-// SPDX-License_Identifier: GPL-2.0
-// Copyright (C) 2018 Intel Corporation
-
-#include <linux/clk-provider.h>
-#include <linux/clkdev.h>
 #include <linux/kernel.h>
 #include <linux/module.h>
+#include <linux/clk-provider.h>
+#include <linux/clkdev.h>
 #include <linux/platform_device.h>
+#include <linux/regmap.h>
 #include <linux/mfd/tps68470.h>
 
-#define TPS68470_CLK_NAME "tps68470-clk"
+#define TPS68470_CLK_NAME       "tps68470-clk"
+
+/* probably should go into the MFD header */
+#define TPS68470_HCLK_A_PLL_OUTPUT_ENABLE   0x02
+#define TPS68470_HCLK_B_PLL_OUTPUT_ENABLE   0x08
+
+#define TPS68470_HCLK_A_DRV_STR_2MA         0x01
+#define TPS68470_HCLK_B_DRV_STR_2MA         0x04
+
+#define TPS68470_OSC_EXT_CAP_DEFAULT        0x10
+#define TPS68470_CLK_SRC_XTAL               0x80
+/* end of probably should go into the MFD header */
 
 #define to_tps68470_clkdata(clkd) \
 	container_of(clkd, struct tps68470_clkdata, clkout_hw)
@@ -57,99 +66,97 @@ struct tps68470_clkout_freqs {
 };
 
 struct tps68470_clkdata {
-	struct tps68470 *tps68470;
-	struct clk_hw clkout_hw;
-	struct clk *clk;
-	int clk_cfg_idx;
+	struct clk_hw   clkout_hw;
+	struct clk      *clk;
+	struct regmap   *tps68470_regmap;
+	int             clk_cfg_idx;
 };
 
+
 static int tps68470_clk_is_prepared(struct clk_hw *hw)
 {
-	struct tps68470_clkdata *clkdata = to_tps68470_clkdata(hw);
-	struct tps68470 *tps = clkdata->tps68470;
-	int val;
+	struct tps68470_clkdata *tps68470_clkdata = to_tps68470_clkdata(hw);
+	struct regmap *regmap = tps68470_clkdata->tps68470_regmap;
+	int ret, val;
 
-	if (tps68470_reg_read(tps, TPS68470_REG_PLLCTL, &val))
-		return 0;
+	ret = regmap_read(regmap, TPS68470_REG_PLLCTL, &val);
+
+	if (ret < 0) {
+		return ret;
+	}
 
 	return val & TPS68470_PLL_EN_MASK;
 }
 
 static int tps68470_clk_prepare(struct clk_hw *hw)
 {
-	struct tps68470_clkdata *clkdata = to_tps68470_clkdata(hw);
-	struct tps68470 *tps = clkdata->tps68470;
-	int idx = clkdata->clk_cfg_idx;
-	u8 val;
-
-	tps68470_reg_write(tps, TPS68470_REG_BOOSTDIV, clk_freqs[idx].boostdiv);
-	tps68470_reg_write(tps, TPS68470_REG_BUCKDIV, clk_freqs[idx].buckdiv);
-	tps68470_reg_write(tps, TPS68470_REG_PLLSWR, TPS68470_PLLSWR_DEFAULT);
-	tps68470_reg_write(tps, TPS68470_REG_XTALDIV, clk_freqs[idx].xtaldiv);
-	tps68470_reg_write(tps, TPS68470_REG_PLLDIV, clk_freqs[idx].plldiv);
-	tps68470_reg_write(tps, TPS68470_REG_POSTDIV, clk_freqs[idx].postdiv);
-	tps68470_reg_write(tps, TPS68470_REG_POSTDIV2, clk_freqs[idx].postdiv);
-
-	tps68470_reg_write(tps, TPS68470_REG_CLKCFG2,
-			   TPS68470_DRV_STR_2MA << TPS68470_OUTPUT_A_SHIFT);
-	tps68470_reg_write(tps, TPS68470_REG_CLKCFG1,
-			   (TPS68470_PLL_OUTPUT_ENABLE <<
-			   TPS68470_OUTPUT_A_SHIFT) |
-			   (TPS68470_PLL_OUTPUT_ENABLE <<
-			   TPS68470_OUTPUT_B_SHIFT));
-	val = TPS68470_PLL_EN_MASK |
-	      TPS68470_OSC_EXT_CAP_DEFAULT << TPS68470_OSC_EXT_CAP_SHIFT |
-	      TPS68470_CLK_SRC_XTAL << TPS68470_CLK_SRC_SHIFT;
-
-	tps68470_reg_write(tps, TPS68470_REG_PLLCTL, val);
+	struct tps68470_clkdata *tps68470_clkdata = to_tps68470_clkdata(hw);
+	struct regmap *regmap = tps68470_clkdata->tps68470_regmap;
+	int idx;
+
+	idx = tps68470_clkdata->clk_cfg_idx;
+
+	regmap_write(regmap, TPS68470_REG_BOOSTDIV, clk_freqs[idx].boostdiv);
+	regmap_write(regmap, TPS68470_REG_BUCKDIV, clk_freqs[idx].buckdiv);
+	regmap_write(regmap, TPS68470_REG_PLLSWR, 0x02); /* Guessing based on DS. */
+	regmap_write(regmap, TPS68470_REG_XTALDIV, clk_freqs[idx].xtaldiv);
+	regmap_write(regmap, TPS68470_REG_PLLDIV, clk_freqs[idx].plldiv);
+	regmap_write(regmap, TPS68470_REG_POSTDIV, clk_freqs[idx].postdiv);
+	regmap_write(regmap, TPS68470_REG_POSTDIV2, clk_freqs[idx].postdiv);
+
+	/* set both clocks to 2ma drive strength */
+	regmap_write(regmap, TPS68470_REG_CLKCFG2, TPS68470_HCLK_A_DRV_STR_2MA | TPS68470_HCLK_B_DRV_STR_2MA);
+
+	/* set both clocks to PLL output */
+	regmap_write(regmap, TPS68470_REG_CLKCFG1, TPS68470_HCLK_A_PLL_OUTPUT_ENABLE | TPS68470_HCLK_B_PLL_OUTPUT_ENABLE);
+
+	/*
+	 * sets oscillator's external capacitance to 2 pico-farad and clock source to XTAL oscillator.
+	 * The capacitance value is a total guess since the Intel driver this is adapted from had it as
+	 * an orphaned macro, so I can't use their guess.
+	 */
+	regmap_write(regmap, TPS68470_REG_PLLCTL, TPS68470_OSC_EXT_CAP_DEFAULT | TPS68470_CLK_SRC_XTAL);
 
 	return 0;
 }
 
 static void tps68470_clk_unprepare(struct clk_hw *hw)
 {
-	struct tps68470_clkdata *clkdata = to_tps68470_clkdata(hw);
-	struct tps68470 *tps = clkdata->tps68470;
+	struct tps68470_clkdata *tps68470_clkdata = to_tps68470_clkdata(hw);
+	struct regmap *regmap = tps68470_clkdata->tps68470_regmap;
 
 	/* disable clock first*/
-	tps68470_clear_bits(tps, TPS68470_REG_PLLCTL, TPS68470_PLL_EN_MASK);
+	regmap_write(regmap, TPS68470_REG_PLLCTL, TPS68470_PLL_EN_MASK);
 
 	/* write hw defaults */
-	tps68470_reg_write(tps, TPS68470_REG_BOOSTDIV, 0);
-	tps68470_reg_write(tps, TPS68470_REG_BUCKDIV, 0);
-	tps68470_reg_write(tps, TPS68470_REG_PLLSWR, 0);
-	tps68470_reg_write(tps, TPS68470_REG_XTALDIV, 0);
-	tps68470_reg_write(tps, TPS68470_REG_PLLDIV, 0);
-	tps68470_reg_write(tps, TPS68470_REG_POSTDIV, 0);
-	tps68470_reg_write(tps, TPS68470_REG_CLKCFG2, 0);
-	tps68470_reg_write(tps, TPS68470_REG_CLKCFG1, 0);
+	regmap_write(regmap, TPS68470_REG_BOOSTDIV, 0);
+	regmap_write(regmap, TPS68470_REG_BUCKDIV, 0);
+	regmap_write(regmap, TPS68470_REG_PLLSWR, 0);
+	regmap_write(regmap, TPS68470_REG_XTALDIV, 0);
+	regmap_write(regmap, TPS68470_REG_PLLDIV, 0);
+	regmap_write(regmap, TPS68470_REG_POSTDIV, 0);
+	regmap_write(regmap, TPS68470_REG_CLKCFG2, 0);
+	regmap_write(regmap, TPS68470_REG_CLKCFG1, 0);
 }
 
 static int tps68470_clk_enable(struct clk_hw *hw)
 {
-	/*
-	 * FIXME: enabled in prepare because need of
-	 *	  i2c write and this should not sleep
-	 */
 	return 0;
 }
 
 static void tps68470_clk_disable(struct clk_hw *hw)
 {
-	/*
-	 * FIXME: disabled in unprepare because need of
-	 *	  i2c write and this should not sleep
-	 */
+	return;
 }
 
-static unsigned long tps68470_clk_recalc_rate(struct clk_hw *hw,
-				    unsigned long parent_rate)
+static unsigned long tps68470_clk_recalc_rate(struct clk_hw *hw, unsigned long parent_rate)
 {
 	struct tps68470_clkdata *clkdata = to_tps68470_clkdata(hw);
 
 	return clk_freqs[clkdata->clk_cfg_idx].freq;
 }
 
+
 static int tps68470_clk_cfg_lookup(unsigned long rate)
 {
 	unsigned long best = ULONG_MAX;
@@ -171,16 +178,14 @@ static int tps68470_clk_cfg_lookup(unsigned long rate)
 	return i;
 }
 
-static long tps68470_clk_round_rate(struct clk_hw *hw, unsigned long rate,
-				    unsigned long *parent_rate)
+static long tps68470_clk_round_rate(struct clk_hw *hw, unsigned long rate, unsigned long *parent_rate)
 {
 	int idx = tps68470_clk_cfg_lookup(rate);
 
 	return clk_freqs[idx].freq;
 }
 
-static int tps68470_clk_set_rate(struct clk_hw *hw, unsigned long rate,
-				 unsigned long parent_rate)
+static int tps68470_clk_set_rate(struct clk_hw *hw, unsigned long rate, unsigned long parent_rate)
 {
 	struct tps68470_clkdata *clkdata = to_tps68470_clkdata(hw);
 	int idx = tps68470_clk_cfg_lookup(rate);
@@ -207,34 +212,36 @@ static const struct clk_ops tps68470_clk_ops = {
 static struct clk_init_data tps68470_clk_initdata = {
 	.name = TPS68470_CLK_NAME,
 	.ops = &tps68470_clk_ops,
-	.flags = CLK_IS_ROOT,
 };
 
 static int tps68470_clk_probe(struct platform_device *pdev)
 {
-	struct tps68470 *tps68470 = dev_get_drvdata(pdev->dev.parent);
-	struct tps68470_clkdata *tps68470_clkdata;
+	struct regmap           *tps68470_regmap;
+	struct tps68470_clkdata     *tps68470_clkdata;
 	int ret;
 
-	tps68470_clkdata = devm_kzalloc(&pdev->dev, sizeof(*tps68470_clkdata),
-					GFP_KERNEL);
-	if (!tps68470_clkdata)
+	tps68470_clkdata = devm_kzalloc(&pdev->dev, sizeof(*tps68470_clkdata), GFP_KERNEL);
+
+	if (!tps68470_clkdata) {
 		return -ENOMEM;
+	}
 
-	tps68470_clkdata->tps68470 = tps68470;
+	tps68470_regmap = dev_get_drvdata(pdev->dev.parent);
+	tps68470_clkdata->tps68470_regmap = tps68470_regmap;
 	tps68470_clkdata->clkout_hw.init = &tps68470_clk_initdata;
-	tps68470_clkdata->clk =
-		devm_clk_register(&pdev->dev, &tps68470_clkdata->clkout_hw);
+
+	tps68470_clkdata->clk = devm_clk_register(&pdev->dev, &tps68470_clkdata->clkout_hw);
+
 	if (IS_ERR(tps68470_clkdata->clk))
 		return PTR_ERR(tps68470_clkdata->clk);
 
+
 	/* FIXME: Cannot remove clkdev so block module removal */
 	ret = try_module_get(THIS_MODULE);
 	if (!ret)
 		goto error;
 
-	ret = clk_register_clkdev(tps68470_clkdata->clk,
-				  TPS68470_CLK_NAME, NULL);
+	ret = clk_register_clkdev(tps68470_clkdata->clk, TPS68470_CLK_NAME, NULL);
 	if (ret) {
 		dev_err(&pdev->dev, "failed to register clkdev:%d\n", ret);
 		goto error;
@@ -242,39 +249,31 @@ static int tps68470_clk_probe(struct platform_device *pdev)
 
 	platform_set_drvdata(pdev, tps68470_clkdata);
 
-	dev_info(tps68470->dev, "Registered %s clk\n", pdev->name);
+	dev_info(pdev->dev.parent, "Registered %s clk\n", pdev->name);
 
 	return 0;
+
 error:
-	clk_unregister(tps68470_clkdata->clk);
 
-	return ret;
+	return 1;
 }
 
-static struct platform_driver tps68470_clk = {
+static const struct platform_device_id tps68470_clk_id_table[] = {
+	{ TPS68470_CLK_NAME, 0 },
+	{ },
+};
+MODULE_DEVICE_TABLE(platform, tps68470_clk_id_table);
+
+static struct platform_driver tps68470_clk_driver = {
 	.driver = {
 		.name = TPS68470_CLK_NAME,
 	},
 	.probe = tps68470_clk_probe,
+	.id_table = tps68470_clk_id_table,
 };
+module_platform_driver(tps68470_clk_driver);
 
-static int __init tps68470_clk_init(void)
-{
-	return platform_driver_register(&tps68470_clk);
-}
-subsys_initcall(tps68470_clk_init);
 
-static void __exit tps68470_clk_exit(void)
-{
-	platform_driver_unregister(&tps68470_clk);
-}
-module_exit(tps68470_clk_exit);
-
-MODULE_AUTHOR("Zaikuo Wang <zaikuo.wang@intel.com>");
-MODULE_AUTHOR("Tianshu Qiu <tian.shu.qiu@intel.com>");
-MODULE_AUTHOR("Jian Xu Zheng <jian.xu.zheng@intel.com>");
-MODULE_AUTHOR("Yuning Pu <yuning.pu@intel.com>");
-MODULE_AUTHOR("Antti Laakso <antti.laakso@intel.com>");
-MODULE_DESCRIPTION("clock driver for TPS68470 pmic");
-MODULE_ALIAS("platform:tps68470-clk");
-MODULE_LICENSE("GPL");
+MODULE_AUTHOR("Dan Scally <djrscally@protonmail.com");
+MODULE_DESCRIPTION("Clock driver for TI TPS68470 PMIC");
+MODULE_LICENSE("GPL v2");
\ No newline at end of file
diff --git a/drivers/mfd/tps68470.c b/drivers/mfd/tps68470.c
index 58835ff82a21..8a456e2f63a9 100644
--- a/drivers/mfd/tps68470.c
+++ b/drivers/mfd/tps68470.c
@@ -23,6 +23,7 @@ static const struct mfd_cell tps68470s[] = {
 	{ .name = "tps68470-gpio" },
 	{ .name = "tps68470_pmic_oprg" },
 	{ .name = "tps68470-regulator" },
+	{ .name = "tps68470-clk" },
 };
 
 static const struct regmap_config tps68470_regmap_config = {
-- 
2.28.0

